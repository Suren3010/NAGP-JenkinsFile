pipeline {
    environment {
        dockerImage = "sampleproject"
    }

    agent any
    stages {
        //****** Cloning project */
        stage('Clone project') {
            steps {
                echo 'Cloning project...'
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Suren3010/Sample.Project.git']]]
                echo 'Project cloned...'
            }
        }
        stage('Cleaning project') {
            steps {
                dotnetClean project: 'Sample.Project.sln', sdk: 'dotnet-sdk'
            }
        }
        //**** Restore dependencies */
        stage('Restore dependencies') {
            steps {
                dotnetRestore project: 'Sample.Project.sln', sdk: 'dotnet-sdk'
            }
        }
        //***  Building project */
        stage('Build solution') {
            steps {
                dotnetBuild project: 'Sample.Project.sln', sdk: 'dotnet-sdk'
            }
        }
        //*** Publish  */
        stage('Publish') {
            steps {
                dotnetPublish configuration: 'Release', project: 'Sample.Project/Sample.Project.csproj', sdk: 'dotnet-sdk', selfContained: false
            }
        }

        //*** Build docker image */
        stage('docker version') {
            steps {
                powershell 'docker --version'
            }
        }
        stage('build docker image') {
            steps {
                powershell 'docker build  -t ' + env.dockerImage + ':1.0 .'
            }
        }

        stage('build docker image with docker.build') {
            steps {
                script {
                    docker.withRegistry('index.docker.io', 'dockerhub2') {
                        def dockerImage = docker.build("${env.dockerImage}:1.0")
                        dockerImage.push()
                    }
                }
            }
        }
    }
}